mkdir -p extract_unique_values/python-env
python3 -m venv extract_unique_values/python-env
source extract_unique_values/python-env/bin/activate 

cat <<EOF > extract_unique_values/requirements.txt
polars>=0.20.0
psutil>=5.9.0
PyYAML>=6.0
EOF

pip install --upgrade pip
pip install -r extract_unique_values/requirements.txt

pip freeze > extract_unique_values/requirements.lock.txt


vi extract_unique_values/extract_unique_values.py 

python extract_unique_values/extract_unique_values.py 


Extract Unique Values Script:

Overview

This script allows you to extract unique values from various data files (CSV, JSON, YAML, or Parquet) based on user-defined filters. It then allows you to save the results in different formats, such as CSV, JSON, YAML, or Parquet.

Features
Input formats supported		  : CSV, JSON, YAML, Parquet
Filter support				      : Apply filters based on fields and their unique values
Output formats supported	  : CSV, JSON, YAML, Parquet
Flexible separator support	: Use a custom separator for CSV output
Custom column names			    : Define a custom column name for the output
Row format options			    : Choose between single-row or multi-row output formats

Requirements

Before running the script, ensure you have the following dependencies installed:

polars: Fast DataFrame library for processing large data.
psutil: To track memory usage.
PyYAML: To read YAML files.
argparse: For command-line argument parsing.

You can install the dependencies with:


python extract_unique_values.py --input <input_file> [options] <filters>

Input Parameters:

--input <input_file>		    : Path to the input file (CSV, JSON, YAML, or Parquet).
--output <output_file>		  : (Optional) Path to the output file.
--unique-field <field>		  : (Optional) Name of the field to extract unique values from.
--separator <separator>		  : (Optional) Custom separator for single-row output (default is ;).
--column-name <column_name>	: (Optional) Custom column name for the output (default is unique_<unique_field>).
--row-format <single|multi>	: (Optional) Row format: single or multi (default is single).
--delimiter <delimiter>		  : (Optional) CSV delimiter (default is ,).
--verbose					          : (Optional) Enable verbose logging.
<filters>					          : (Optional) Filters in format field=value1,value2,.... Multiple filters can be passed.

Example:

Extract unique values from a CSV file with filters and save to CSV:

python extract_unique_values.py --input data.csv --output result.csv --unique-field region --row-format single --filters "region=us,eu,asia" 

Extract unique values from a Parquet file and save to JSON:

python extract_unique_values.py --input data.parquet --unique-field sector --output result.json --filters "sector=finance,technology"


Step-by-Step Guide:

Run the script:

To start the script, run:


python extract_unique_values.py

If you don‚Äôt provide the input file via the command line, the script will prompt you to enter the path to the input file.

üìÇ Enter path to input file (CSV, JSON, YAML, or Parquet): /path/to/data/file.csv
Select Filters:

After entering the input file path, the script will list available fields (columns) from the data file.

It will prompt you to apply filters based on these fields. You can apply multiple filters by entering comma-separated values.

Example:


üìå Available fields: region, sector, environment
Field name (leave empty to stop): region
üîπ Available values for 'region': us, eu, asia
Enter comma-separated values for region: us, eu
Field name (leave empty to stop): sector
üîπ Available values for 'sector': finance, technology
Enter comma-separated values for sector: finance
Field name (leave empty to stop): 
Select the Unique Field:

The script will prompt you to select the field for which you want to extract unique values.

Example:


üéØ Available fields: region, sector, environment
Select the field to extract unique values from: sector
Choose Output Settings:

The script will ask for the separator to use in the CSV output (default is ;), the custom column name (default is unique_<unique_field>), and the row format (single or multi).

Example:


Enter separator for unique values (default ';'): ;
Enter custom column name (default 'unique_sector'): unique_industry
Row format? (single/multi) [default=single]: single
Select Output Format:

The script will ask you which output format you'd prefer for saving the results: CSV, JSON, YAML, or Parquet.

Example:


Select output format (csv, json, yaml, parquet) [default=csv]: json
Saving the Output:

Once you've selected the format, the script will ask you for the output file name. If the file already exists, it will prompt you to confirm whether you want to overwrite the file.

Example:


‚ö†Ô∏è File 'result.json' exists. Overwrite? (y/n): y
‚úÖ Output saved to: result.json


View the Results:

The script will display the unique values extracted from the specified field. It will also show the time taken and memory used during the extraction process.

Example:

üîé Unique values found:
- finance
- technology

‚è±Ô∏è Time taken: 0.45s | üß† Memory used: 25.65 MB
Example Walkthrough:
User runs the script:

python extract_unique_values.py
Script prompts for input file path:

üìÇ Enter path to input file (CSV, JSON, YAML, or Parquet): /data/my_data.json
Script shows available fields for filtering:

üìå Available fields: region, sector, environment
Field name (leave empty to stop): region
üîπ Available values for 'region': apac, emea, am√©ricas
Enter comma-separated values for region: emea
Script prompts for the unique field:


üéØ Available fields: region, sector, environment
Select the field to extract unique values from: sector
Script asks for output format and filename:

Select output format (csv, json, yaml, parquet) [default=csv]: json
Output file name (without extension): result
‚ö†Ô∏è File 'result.json' exists. Overwrite? (y/n): y

‚úÖ Output saved to: result.json
Troubleshooting
File format issues	: If the script doesn‚Äôt support the input file format, it will raise an error message.
Empty results		: If no matching values are found after filtering, the script will display ‚ÑπÔ∏è No matching values found.
Permission issues	: If you encounter a permission error while trying to save the file, ensure the output path is writable.

Notes:
The script uses Polars for data processing, which is optimized for speed and memory efficiency.
The memory used and time taken are printed at the end to help you track the performance.
